{"version":3,"sources":["icon-cog.svg","buzzr.mp3","easter-egg.mp3","Buzzer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Buzzer","props","react_default","a","createElement","className","src","cog","alt","isBuzzing","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","keyboardBuzz","bind","assertThisInitialized","gamepadBuzz","start","_this2","setState","url","window","location","hash","easterEggSound","buzzrSound","Audio","play","then","setTimeout","event","stopPropagation","code","buzz","navigator","getGamepads","buttons","some","btn","pressed","requestAnimationFrame","_this3","document","addEventListener","gamepad","console","log","concat","index","id","cancelAnimationFrame","removeEventListener","src_Buzzer_0","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,sDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mSCUzBC,EANA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAKC,IAAI,MAAMH,UAAWJ,EAAMQ,UAAY,UAAY,uCC0EvDC,cAzEb,SAAAA,EAAYT,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KACDiB,MAAQ,CAAET,WAAW,GAC1BE,EAAKQ,aAAeR,EAAKQ,aAAaC,KAAlBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACpBA,EAAKW,YAAcX,EAAKW,YAAYF,KAAjBR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KACnBA,EAAKY,MAAQ,KALIZ,sEAQZ,IAAAa,EAAAV,KACLA,KAAKW,SAAS,CAAEhB,WAAW,IAC3B,IAAMiB,EACqB,YAAzBC,OAAOC,SAASC,KAAqBC,IAAiBC,IACzC,IAAIC,MAAMN,GAClBO,OAAOC,KAAK,WACjBC,WAAW,WACTX,EAAKC,SAAS,CAAEhB,WAAW,KAC1B,4CAIM2B,GACXA,EAAMC,kBACF,UAAYD,EAAME,MACpBxB,KAAKyB,6CAMEC,UAAUC,cAAc,GAG1BC,QAAQC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,YAAa/B,KAAKI,MAAMT,WACrDK,KAAKyB,OAIPzB,KAAKS,MAAQI,OAAOmB,sBAAsBhC,KAAKQ,yDAG7B,IAAAyB,EAAAjC,KAClBkC,SAASC,iBAAiB,UAAWnC,KAAKK,cAE1CQ,OAAOsB,iBAAiB,mBAAoB,WAC1C,IAAIC,EAAUV,UAAUC,cAAc,GACtCU,QAAQC,IAAR,8BAAAC,OAA0CH,EAAQI,MAAlD,MAAAD,OAA4DH,EAAQK,KACpER,EAAKzB,gBAGPK,OAAOsB,iBAAiB,sBAAuB,WAC7CE,QAAQC,IAAI,wBACZzB,OAAO6B,qBAAqBT,EAAKxB,wDAKnCyB,SAASS,oBAAoB,WAC7B9B,OAAO8B,oBAAoB,oBAC3B9B,OAAO8B,oBAAoB,wDAI3B,OACEvD,EAAAC,EAAAC,cAAA,OAAKC,UAAWS,KAAKI,MAAMT,UAAY,kBAAoB,OACzDP,EAAAC,EAAAC,cAACsD,EAAD,CAAQjD,UAAWK,KAAKI,MAAMT,YAC9BP,EAAAC,EAAAC,cAAA,gBACMF,EAAAC,EAAAC,cAAA,oBADN,uCAlEUuD,aCMEC,QACW,cAA7BjC,OAAOC,SAASiC,UAEe,UAA7BlC,OAAOC,SAASiC,UAEhBlC,OAAOC,SAASiC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASjB,SAASkB,eAAe,SD2H3C,kBAAmB1B,WACrBA,UAAU2B,cAAcC,MAAMlC,KAAK,SAAAmC,GACjCA,EAAaC","file":"static/js/main.3684188a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icon-cog.2117e8e6.svg\";","module.exports = __webpack_public_path__ + \"static/media/buzzr.093eed4f.mp3\";","module.exports = __webpack_public_path__ + \"static/media/easter-egg.7da44188.mp3\";","import React from \"react\";\nimport \"./Buzzer.css\";\nimport cog from \"./icon-cog.svg\";\n\nconst Buzzer = props => (\n  <div className=\"Buzzer\">\n    <img src={cog} alt=\"Cog\" className={props.isBuzzing ? \"pressed\" : \"\"} />\n  </div>\n);\n\nexport default Buzzer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Buzzer from \"./Buzzer\";\nimport buzzrSound from \"./buzzr.mp3\";\nimport easterEggSound from \"./easter-egg.mp3\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isBuzzing: false };\n    this.keyboardBuzz = this.keyboardBuzz.bind(this);\n    this.gamepadBuzz = this.gamepadBuzz.bind(this);\n    this.start = null;\n  }\n\n  buzz() {\n    this.setState({ isBuzzing: true });\n    const url =\n      window.location.hash === \"#easter\" ? easterEggSound : buzzrSound;\n    const buzzer = new Audio(url);\n    buzzer.play().then(() => {\n      setTimeout(() => {\n        this.setState({ isBuzzing: false });\n      }, 1000);\n    });\n  }\n\n  keyboardBuzz(event) {\n    event.stopPropagation();\n    if (\"Space\" === event.code) {\n      this.buzz();\n    }\n  }\n\n  gamepadBuzz() {\n    // We only consider the first detected GamePad\n    var gp = navigator.getGamepads()[0];\n\n    // Any pressed button can buzz but only if we are not already buzzing\n    if (gp.buttons.some(btn => btn.pressed) && !this.state.isBuzzing) {\n      this.buzz();\n    }\n\n    // This is the game loop\n    this.start = window.requestAnimationFrame(this.gamepadBuzz);\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.keyboardBuzz);\n\n    window.addEventListener(\"gamepadconnected\", () => {\n      var gamepad = navigator.getGamepads()[0];\n      console.log(`Gamepad connected at index ${gamepad.index}: ${gamepad.id}`);\n      this.gamepadBuzz();\n    });\n\n    window.addEventListener(\"gamepaddisconnected\", () => {\n      console.log(\"GamePad disconnected\");\n      window.cancelAnimationFrame(this.start);\n    });\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\");\n    window.removeEventListener(\"gamepadconnected\");\n    window.removeEventListener(\"gamepaddisconnected\");\n  }\n\n  render() {\n    return (\n      <div className={this.state.isBuzzing ? \"App App-buzzing\" : \"App\"}>\n        <Buzzer isBuzzing={this.state.isBuzzing} />\n        <p>\n          Hit <kbd>space</kbd> or a ðŸŽ® to buzz!\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}