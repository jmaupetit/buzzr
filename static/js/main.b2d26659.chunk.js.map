{"version":3,"sources":["Buzzer.js","App.js","serviceWorker.js","index.js","icon-cog.svg"],"names":["Buzzer","props","react_default","a","createElement","className","isBuzzing","src","cog","alt","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","buzz","bind","assertThisInitialized","event","_this2","stopPropagation","code","setState","url","Math","floor","random","Audio","play","then","setTimeout","document","addEventListener","removeEventListener","src_Buzzer_0","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"uTAUeA,EANA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAWJ,EAAMK,UAAY,iBAAmB,UACnDJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAKC,IAAI,UC4CRC,cA7Cb,SAAAA,EAAYT,GAAO,IAAAU,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMb,KACDiB,MAAQ,CAAEZ,WAAW,GAC1BK,EAAKQ,KAAOR,EAAKQ,KAAKC,KAAVR,OAAAS,EAAA,EAAAT,QAAAS,EAAA,EAAAT,CAAAD,KAHKA,oEAQdW,GAAO,IAAAC,EAAAT,KAEV,GADAQ,EAAME,kBACF,UAAYF,EAAMG,KAAM,CAC1BX,KAAKY,SAAS,CAAEpB,WAAW,IAC3B,IAAMqB,EACJC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,KAAO,IAAM,EAC/C,wEACA,2GACS,IAAIE,MAAMJ,GAClBK,OAAOC,KAAK,WACjBC,WAAW,WACTX,EAAKG,SAAS,CAAEpB,WAAW,KAC1B,oDAMP6B,SAASC,iBAAiB,UAAWtB,KAAKK,qDAI1CgB,SAASE,oBAAoB,UAAWvB,KAAKK,uCAI7C,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAWS,KAAKI,MAAMZ,UAAY,kBAAoB,OACzDJ,EAAAC,EAAAC,cAACkC,EAAD,CAAQhC,UAAWQ,KAAKI,MAAMZ,YAC9BJ,EAAAC,EAAAC,cAAA,gBACMF,EAAAC,EAAAC,cAAA,oBADN,qBAtCUmC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5C,EAAAC,EAAAC,cAAC2C,EAAD,MAASZ,SAASa,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlB,KAAK,SAAAmB,GACjCA,EAAaC,kCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.b2d26659.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Buzzer.css\";\nimport cog from \"./icon-cog.svg\";\n\nconst Buzzer = props => (\n  <div className={props.isBuzzing ? \"Buzzer-pressed\" : \"Buzzer\"}>\n    <img src={cog} alt=\"Cog\" />\n  </div>\n);\n\nexport default Buzzer;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Buzzer from \"./Buzzer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { isBuzzing: false };\n    this.buzz = this.buzz.bind(this);\n  }\n\n  // Inspired from:\n  // https://github.com/facebook/react/issues/285#issuecomment-373931454\n  buzz(event) {\n    event.stopPropagation();\n    if (\"Space\" === event.code) {\n      this.setState({ isBuzzing: true });\n      const url =\n        Math.floor(Math.random() * Math.floor(10)) % 3 === 0\n          ? \"https://www.myinstants.com/media/sounds/wrong-answer-sound-effect.mp3\"\n          : \"https://www.zapsplat.com/wp-content/uploads/2015/sound-effects-21014/zapsplat_cartoon_fart_037_21629.mp3\";\n      const buzzer = new Audio(url);\n      buzzer.play().then(() => {\n        setTimeout(() => {\n          this.setState({ isBuzzing: false });\n        }, 2000);\n      });\n    }\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.buzz);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.buzz);\n  }\n\n  render() {\n    return (\n      <div className={this.state.isBuzzing ? \"App App-buzzing\" : \"App\"}>\n        <Buzzer isBuzzing={this.state.isBuzzing} />\n        <p>\n          Hit <kbd>space</kbd> to buzz!\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/icon-cog.2117e8e6.svg\";"],"sourceRoot":""}